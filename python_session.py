# -*- coding: utf-8 -*-
"""Python Session.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yb5Jh4TbXm3FKzRzgz48yYFTaIwMGu0W
"""

#Python - Scripting language
#Object oreinted, 3rd party support, Dynamic Typing(Compiler assigns type),Interpreted langauge
# """ cjewbvier2bvp32brv3rb2vwfpibr
# vko3nevn2r3jkbvkj32n
# jb23nvjb3ikv """

i=1234567890 #Unlimited length
print(i)
print("abc")
str="sbc"

str

print(0X20)

type(0X20)

x=2.5
y=45e-1
print(y)

x=True
x

print("ABC")
print("DEF")
print("ABC",end="")
print("DEF")

#Fstrings
x=123
b=True
print(f"Hey why you have {x} chocoloates it that {b}?")

x = 10
y = 20
print(f"{x = }, {y = }")

"""Lists"""

l=list()

l

l=[]
l

for i in range(10):#Range properties x,y;x;x,y,skip
  l.append(i)

l

#Multiple assignment
a=b=c=1
print(a,b,c)

a,b,c=1,2.4,"xy"
print(a,b,c)#Values to unpack - too many/not enough

print("Why is the anseer of this equal to " + "5" + "?")#Adding strings

l=[i for i in "ABC"]

l

l[:2]

a = "Hello World!"
print(a[::-1])

"""Boolen Conditions"""

x=True
print( not x)

x=True
y=2 if x else 3
print(y)

len(l)

def list_convert():
    t = (4,3,5,0,1)      # define a tuple
    s = 'hello world!'   # define a string
    d = {'name':"Eyong","age":30,"gender":"Male"}  # define a dict

    # convert all sequences to list
    t_list, s_list, d_list = list(t), list(s), list(d)
    print(list(d.values()))
    # create empty list
    empty_list = list()

    print("tuple_to_list: ", t_list)
    print("string_to_list: ", s_list)
    print("dict_to_list: ", d_list)
    print("empty_list: ", empty_list)
list_convert()

names=["abc","def","xy"]
list(enumerate(names,3))

lx=filter(lambda name: len(name) >=3, names)
list(lx)

a = [1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 2, 2]
print(list(set(a)))

names1=["pqr","stu","wxyz"]
for x,y in zip(names,names1):
  print(x+" "+y)

l=list(range(10))
l

sum(l)

print(min(l),max(l))

l.reverse()
l

l.sort()
l

l.reverse()
l1=sorted(l,key= lambda x:-x)
l1

l1=reversed(l1)
l1=list(l1)
l1

l2=list(map(lambda x: x+2,l1))
l2

"""LOOPS"""

l=['a','b','c','d']
for i in l :
  print(i)
for i in range(len(l)):
  print(l[i])
i=0
while i< len(l):
  print(l[i])
  i+=1
  #No do while in python- while(True)

"""Dictionaries"""

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

thisdict["brand"]

#Duplicates will overwrite exitsing values

thisdict = dict(name = "John", age = 36, country = "Norway")

thisdict

thisdict.get("name")

thisdict.items()

thisdict.keys()

thisdict.values()

thisdict.pop("age")

thisdict

thisdict.update(b=200, d=400)

thisdict

a = {"a": 1, "b": 2}
b = {"c": 3, "d": 4}

a_and_b = a | b
print(a_and_b)

"""String

"""

str="hello how are you?"

str1=str.capitalize()
str1

str2=str.upper()
str2

str3=str.lower()
str3

str4=str.title()
str4

str.find("a")

str.isdecimal()

str.rfind('h')

liststr=str.partition("how")
liststr

liststr=str.split(" ")
liststr

str.index("y")

"""Tuple"""

t=tuple()

t

t=()

t

t=(i for i in "ABC")#Generator object

for i in t:
  print(i)

a = (1, 2, [1, 2, 3])
a[2].append(4)
print(a)

#t.append(12)

"""Some Amazing things"""

x=1
y* = 1,2,3
print(x, y)

a = [x * 2 for x in range(10)]
list(a)

a = [1, 2, 3, 4 ,5]
b = a

# Change the 4th index in b
b[4] = 7

print(id(a))
print(id(b))
print(a) # Remember we did not explicitly make changes to a.

"""Functions"""

def func( a , b , c):
  x=100
  return x+(a + b+ c)
print(func(1,2,3))

def func(a , *b ) :
  print(b)
  for i in b:
    a+=i
  return a
print(func(1,2,3))

class Person:

    # init method or constructor
    def __init__(self, name):
        self.name = name

    # Sample Method
    def say_hi(self):
        print('Hello, my name is', self.name)


p = Person('Nikhil')
p.say_hi()
print(vars(p))
print(dir(p))
#Explicit is better than implicit
#Public by default

"""# NUMPY & PANDAS BASICS"""

import numpy as np
import pandas as pd

# NumPy is a library for the Python programming language,
#  adding support for large, multi-dimensional arrays and matrices,
#  along with a large collection of high-level mathematical functions to operate on these arrays.

# pandas is a software library written for the Python programming language for data manipulation and analysis.
# In particular, it offers data structures and operations for manipulating numerical tables and time series.

df=pd.read_csv('/content/Nat_Gas.csv')

df

import numpy as np

# Creating a NumPy array from a Python list
python_list = [1, 2, 3, 4, 5]
numpy_array = np.array(python_list)

# Creating a NumPy array with zeros
zeros_array = np.zeros(5)  # Creates an array of zeros with shape (5,)

# Creating a NumPy array with ones
ones_array = np.ones(5)    # Creates an array of ones with shape (5,)

# Creating a NumPy identity matrix
identity_matrix = np.eye(3)  # Creates a 3x3 identity matrix

# Creating a NumPy array with a specified range
range_array = np.arange(0, 10, 2)  # Creates an array from 0 to 8 with step 2

# Creating a NumPy array with random values
random_array = np.random.rand(3, 3)  # Creates a 3x3 array with random values between 0 and 1
print(random_array)
# Creating a NumPy array with a specific data type (e.g., float)
float_array = np.array([1, 2, 3], dtype=float)

# Checking array attributes
print(numpy_array.shape)  # Prints the shape of the array
print(numpy_array.dtype)  # Prints the data type of the array

import numpy as np

# Element-wise operations
arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])

result_add = arr1 + arr2  # Element-wise addition
result_sub = arr1 - arr2  # Element-wise subtraction
result_mul = arr1 * arr2  # Element-wise multiplication
result_div = arr1 / arr2  # Element-wise division

# Broadcasting - applying operations on arrays with different shapes
arr = np.array([1, 2, 3])
scalar = 2

result_broadcast = arr + scalar  # Broadcasting scalar to the array

# Aggregation functions
arr = np.array([1, 2, 3, 4, 5])
mean_value = np.mean(arr)  # Calculate the mean
sum_value = np.sum(arr)    # Calculate the sum
max_value = np.max(arr)    # Find the maximum value
min_value = np.min(arr)    # Find the minimum value

# Indexing and slicing
arr = np.array([0, 1, 2, 3, 4, 5])
element = arr[2]         # Accessing a specific element (index 2)
slice_result = arr[1:4]  # Slicing to get elements from index 1 to 3

print(result_add, result_sub, result_mul, result_div)
print(result_broadcast)
print(mean_value, sum_value, max_value, min_value)
print(element, slice_result)

import pandas as pd

# Creating a Pandas Series
data = [1, 2, 3, 4, 5]
series = pd.Series(data)

# Creating a Pandas DataFrame from a dictionary
data_dict = {'Name': ['Alice', 'Bob', 'Charlie'],
             'Age': [25, 30, 35]}
df = pd.DataFrame(data_dict)

# Accessing columns in a DataFrame
names = df['Name']
ages = df['Age']

# Adding a new column to a DataFrame
df['City'] = ['New York', 'Los Angeles', 'Chicago']

# Indexing and selection
first_row = df.loc[0]    # Selecting the first row by label
first_two_rows = df.iloc[:2]  # Selecting the first two rows by integer position

print(f"Pandas Series:\n{series}")
print(f"Pandas DataFrame:\n{df}")
print(f"Names:\n{names}")
print(f"Ages:\n{ages}")
print(f"First Row:\n{first_row}")
print(f"First Two Rows:\n{first_two_rows}")

import pandas as pd

# Creating a sample DataFrame
data = {'Name': ['Alice', 'Bob', 'Charlie', 'David'],
        'Age': [25, 30, 35, 30],
        'City': ['New York', 'Los Angeles', 'Chicago', 'New York']}
df = pd.DataFrame(data)

# Descriptive statistics
mean_age = df['Age'].mean()
max_age = df['Age'].max()
unique_cities = df['City'].unique()

# Filtering data
young_people = df[df['Age'] < 35]

# Grouping and aggregation
city_group = df.groupby('City')
city_mean_age = city_group['Age'].mean()

# Adding a new column based on conditions
df['Is_Young'] = df['Age'] < 35

print(f"Mean Age: {mean_age}")
print(f"Max Age: {max_age}")
print(f"Unique Cities: {unique_cities}")
print(f"Young People:\n{young_people}")
print(f"City Mean Age:\n{city_mean_age}")
print(f"DataFrame with Is_Young column:\n{df}")

